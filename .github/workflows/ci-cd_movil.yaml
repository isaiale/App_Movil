name: Flutter CI/CD Workflow

on:
  push:
    branches:
      - main
      - develop
      - pruebas
      - test
      - release/*
  pull_request:
    branches:
      - main
      - release/*
  workflow_dispatch: # Activación manual opcional

jobs:
  build:
    name: Build and Test Flutter MEF
    runs-on: ubuntu-latest

    steps:
    # 1. Clonar el repositorio
    - name: Checkout Repository
      uses: actions/checkout@v3

    # 2. Configurar Flutter
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'

    # 3. Cachear las dependencias de Flutter
    - name: Cache Flutter Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pub-
    
    # 4. Verify Flutter installation
    - name: Flutter Doctor
      run: flutter doctor

    # 5. Install dependencies
    - name: Install dependencies
      run: flutter pub get

    # 6. Generar mocks
    - name: Generate mocks
      run: flutter pub run build_runner build --delete-conflicting-outputs
    
    - name: Set up Android Emulator
      run: |
        sudo apt-get update
        sudo apt-get install -yq lib32stdc++6 lib32gcc-s1 lib32ncurses6
        wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip commandlinetools-linux-9477386_latest.zip
        yes | ./cmdline-tools/bin/sdkmanager --licenses
        ./cmdline-tools/bin/sdkmanager "platform-tools" "platforms;android-30" "build-tools;30.0.3" "system-images;android-30;google_apis;x86_64"
        echo "no" | ./cmdline-tools/bin/avdmanager create avd --name test_device --package "system-images;android-30;google_apis;x86_64"
        nohup emulator -avd test_device -no-window -noaudio -gpu off &

    # 8. Esperar a que el emulador esté listo
    - name: Wait for Emulator to Start
      run: |
        flutter devices
        sleep 60 # Esperar hasta que el emulador esté completamente iniciado

    # 7. Ejecutar pruebas con Flutter test
    - name: Run Tests
      run: flutter test test/services/url_service_test.dart

    # 8. Ejecutar pruebas de integración
    - name: Run Integration Test
      run: flutter test integration_test/image_slider_test.dart -d chrome
    
    # monitoreo con Sentry   
    - name: Monitor with Sentry
      env:
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}  # Utilizando el secreto almacenado
      run: |
          flutter test test/errors_test.dart || echo "Error monitored in Sentry"
  
    #  Instalar Java 17 (requiere Java 17 para la compilación)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    #  Establecer JAVA_HOME a la ubicación de Java 17
    - name: Set JAVA_HOME for Gradle
      run: |
        echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
        echo "Path to JAVA_HOME: $JAVA_HOME"

    #  Compilar la aplicación Flutter (APK)
    - name: Build Flutter APK
      run: flutter build apk --release
      continue-on-error: true 

    #  Subir el APK como artefacto
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v3
      with:
        name: flutter-apk
        path: build/app/outputs/flutter-apk/app-release.apk
    
  # deploy:
  #   name: Deploy Flutter MEF
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/pruebas' || github.ref == 'refs/heads/test' || startsWith(github.ref, 'refs/heads/release/')
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: '3.24.5'

  #     - name: Deploy Application
  #       run: echo "Desplegando la aplicación..."  

  #     # Verificar si el archivo APK existe antes de proceder
  #     - name: Verify APK exists
  #       run: |
  #         if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
  #           echo "APK exists"
  #         else
  #           echo "APK does not exist"
  #           exit 1
  #         fi

  #     # Descargar butler desde Google Drive
  #     - name: Download Butler from Google Drive
  #       run: |
  #         curl -L -o butler.zip "https://drive.google.com/uc?export=download&id=1vfo3W8gMqq3xeJUNgLiTayerBq6G5OGE"
  #         unzip butler.zip -d ~/butler
  #         sudo mv ~/butler/butler /usr/local/bin/
  #         butler -V # Verificar instalación

  #     # Subir el archivo a itch.io
  #     - name: Deploy to itch.io
  #       run: |
  #         butler push build/app/outputs/flutter-apk/app-release.apk isaiale/MiApp:android --dry-run --context-timeout=60

  #       env:
  #         BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
  
  # notifications:
  #   name: Slack Notify Results
  #   runs-on: ubuntu-latest
  #   needs: 
  #     - build
  #     - deploy
    
  #   steps:
  #     # Notificación de éxitooooo
  #     - name: Notify Success to Slack
  #       if: success()
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"✅ Flutter CI/CD completado con éxito."}' \
  #         $SLACK_WEBHOOK_URL

  #     # Notificación de error
  #     - name: Notify Failure to Slack
  #       if: failure()
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       run: |
  #         curl -X POST -H 'Content-type: application/json' \
  #         --data '{"text":"❌ Error en Flutter CI/CD. Por favor, revisa los detalles."}' \
  #         $SLACK_WEBHOOK_URL